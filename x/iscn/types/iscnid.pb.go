// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iscn/iscnid.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IscnId struct {
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	TracingId  []byte `protobuf:"bytes,2,opt,name=tracing_id,json=tracingId,proto3" json:"tracing_id,omitempty"`
	Version    uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *IscnId) Reset()      { *m = IscnId{} }
func (*IscnId) ProtoMessage() {}
func (*IscnId) Descriptor() ([]byte, []int) {
	return fileDescriptor_954c94e7d9de942f, []int{0}
}
func (m *IscnId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IscnId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IscnId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IscnId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscnId.Merge(m, src)
}
func (m *IscnId) XXX_Size() int {
	return m.Size()
}
func (m *IscnId) XXX_DiscardUnknown() {
	xxx_messageInfo_IscnId.DiscardUnknown(m)
}

var xxx_messageInfo_IscnId proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IscnId)(nil), "likechain.iscn.IscnId")
}

func init() { proto.RegisterFile("iscn/iscnid.proto", fileDescriptor_954c94e7d9de942f) }

var fileDescriptor_954c94e7d9de942f = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x2c, 0x4e, 0xce,
	0xd3, 0x07, 0x11, 0x99, 0x29, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x7c, 0x39, 0x99, 0xd9,
	0xa9, 0xc9, 0x19, 0x89, 0x99, 0x79, 0x7a, 0x20, 0x71, 0x29, 0x91, 0xf4, 0xfc, 0xf4, 0x7c, 0xb0,
	0x94, 0x3e, 0x88, 0x05, 0x51, 0xa5, 0x54, 0xc2, 0xc5, 0xe6, 0x59, 0x9c, 0x9c, 0xe7, 0x99, 0x22,
	0x24, 0xcf, 0xc5, 0x5d, 0x94, 0x9a, 0x9e, 0x59, 0x5c, 0x52, 0x54, 0x19, 0x9f, 0x99, 0x22, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0xc4, 0x05, 0x13, 0xf2, 0x4c, 0x11, 0x92, 0xe5, 0xe2, 0x2a, 0x29,
	0x4a, 0x4c, 0xce, 0xcc, 0x4b, 0x07, 0xc9, 0x33, 0x29, 0x30, 0x6a, 0xf0, 0x04, 0x71, 0x42, 0x45,
	0x3c, 0x53, 0x84, 0x24, 0xb8, 0xd8, 0xcb, 0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x24, 0x98, 0x15,
	0x18, 0x35, 0x58, 0x82, 0x60, 0x5c, 0x2b, 0x81, 0x8e, 0x05, 0xf2, 0x0c, 0x33, 0x16, 0xc8, 0x33,
	0xbc, 0x58, 0x20, 0xcf, 0xd0, 0x70, 0x47, 0x81, 0xc1, 0xc9, 0xe5, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86,
	0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xb4, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73,
	0xf5, 0xc1, 0x1e, 0xc8, 0xcf, 0xcc, 0xd3, 0x87, 0xfb, 0x44, 0xbf, 0x02, 0xec, 0x47, 0xfd, 0x92,
	0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x17, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xef,
	0x28, 0xea, 0xc2, 0xfd, 0x00, 0x00, 0x00,
}

func (m *IscnId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IscnId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IscnId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintIscnid(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TracingId) > 0 {
		i -= len(m.TracingId)
		copy(dAtA[i:], m.TracingId)
		i = encodeVarintIscnid(dAtA, i, uint64(len(m.TracingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegistryId) > 0 {
		i -= len(m.RegistryId)
		copy(dAtA[i:], m.RegistryId)
		i = encodeVarintIscnid(dAtA, i, uint64(len(m.RegistryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIscnid(dAtA []byte, offset int, v uint64) int {
	offset -= sovIscnid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IscnId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistryId)
	if l > 0 {
		n += 1 + l + sovIscnid(uint64(l))
	}
	l = len(m.TracingId)
	if l > 0 {
		n += 1 + l + sovIscnid(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovIscnid(uint64(m.Version))
	}
	return n
}

func sovIscnid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIscnid(x uint64) (n int) {
	return sovIscnid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IscnId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIscnid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IscnId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IscnId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIscnid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIscnid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracingId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIscnid
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIscnid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TracingId = append(m.TracingId[:0], dAtA[iNdEx:postIndex]...)
			if m.TracingId == nil {
				m.TracingId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIscnid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIscnid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIscnid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIscnid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIscnid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIscnid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIscnid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIscnid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIscnid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIscnid = fmt.Errorf("proto: unexpected end of group")
)
